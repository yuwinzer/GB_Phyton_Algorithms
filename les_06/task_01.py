# -----------------------------------------------------------------------------
#                                   Задача
# 6.1 Подсчитать, сколько было выделено памяти под переменные
# в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
# Результаты анализа вставьте в виде комментариев к коду.
# Также укажите в комментариях версию Python и разрядность вашей ОС.
# -----------------------------------------------------------------------------
# За основу взято задание 3.7:
# 3.7 В одномерном массиве целых чисел определить два наименьших элемента.
# Они могут быть как равны между собой (оба являться минимальными), так и различаться.

# -----------------------------------------------------------------------------
#                                 Комментарий
# Переменные, что используются для генерации случайного числа потребляют 80_000_112 байт памяти.
# Остальные функции имеют всего 2-3 переменные типа INT, что требует всего 48-72 байта памяти.
# Пайтон 3.8, разрядность ОС - х64

# -----------------------------------------------------------------------------
#                                  Реализация
import random

# 24 + 24 + 24 + (40 + 8 * 10_000_000) = 80_000_112 байта памяти используется
ra_biggest_digit = 10_000_000
ra_size = 5_000_000
random_array = []
for i_ in range(ra_size):
    random_array.append(random.randint(0, ra_biggest_digit))


# -----------------------------------------------------------------------------
#                                     Вариант 1
# 24 + 24 + 24 = 72 байта памяти используется
def two_mins_cycle(ra):
    n_min1 = ra[1]
    n_min2 = ra[0]
    for i in range(2, len(ra)):
        if n_min1 >= ra[i]:
            if n_min2 > n_min1:
                n_min2 = n_min1
            n_min1 = ra[i]
        elif n_min2 > ra[i]:
            n_min2 = ra[i]
    return n_min1, n_min2


# -----------------------------------------------------------------------------
#                                      Вариант 2
# 24 + 24 + 24 = 72 байта памяти используется
def two_mins_min_repack(ra):
    n_min1 = min(ra)
    n_min1_pos = ra.index(n_min1)
    n_min2 = min([*ra[:n_min1_pos], *ra[n_min1_pos + 1:]])
    return n_min1, n_min2


# -----------------------------------------------------------------------------
#                                      Вариант 3
# 24 + 24 + 24 = 72 байта памяти используется
def two_mins_min_sorted(ra):
    n_min1 = min(ra)
    n_min1_pos = ra.index(n_min1)
    n_min2 = min(sorted(ra[:n_min1_pos] + ra[n_min1_pos + 1:]))
    return n_min1, n_min2


# -----------------------------------------------------------------------------
#                                      Вариант 4
# 24 + 24 = 48 байта памяти используется
def two_mins_min_remove(ra):
    n_min1 = ra.remove(min(ra))
    n_min2 = ra.remove(min(ra))
    return n_min1, n_min2


# -----------------------------------------------------------------------------
#                                      main func
def main():
    two_mins_cycle(random_array)
    two_mins_min_repack(random_array)
    two_mins_min_sorted(random_array)
    two_mins_min_remove(random_array)


# -----------------------------------------------------------------------------
#

main()